name: Release

on:
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'
  workflow_dispatch:

jobs:
  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry

      - name: Build sdist
        run: poetry build -f sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.0
        with:
          output-dir: dist
        env:
          CIBW_SKIP: "pp*-win*"  # skip PyPy wheels on Windows

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*.whl

  publish:
    name: Publish the package to PyPI
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Print the distribution contents
        run: |
          for f in $(find dist -name '*.tar.gz' | sort); do echo $f; tar -tvf $f; done
          for f in $(find dist -name '*.whl' | sort); do unzip -l $f; done

      - name: Install Poetry
        run: pipx install poetry

      - name: Publish to PyPI
        run: poetry publish --no-interaction
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        if: startsWith(github.ref, 'refs/tags')

      - name: Publish to PyPI (dry-run)
        run: poetry publish --no-interaction --dry-run
        if: "!startsWith(github.ref, 'refs/tags')"
